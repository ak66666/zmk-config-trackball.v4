#include <dt-bindings/zmk/matrix_transform.h>
#include <input/processors.dtsi>
#include "a_ball-layout.dtsi"
#include <dt-bindings/zmk/input_transform.h>
#include "a_ball.dtsi"

&a_ball_layout {
    transform = <&default_transform>;
};

/ {
    chosen {
        zmk,kscan = &kscan0;
    };


    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <1>;
        rows = <11>;
	/* Map represents trackball in "Landscape" orientation, aka Finger-controlled, USB connectors toward user. */
        map = <
   		 RC(0,2)    			     	RC(0,5)
		 RC(0,1)	/* Ball */	        RC(0,4)
	         RC(0,0)    RC(0,12)	RC(0,11)        RC(0,3)
                   /* Buttons on top of the middle deck */
  		       /*  BTReset BTSelect Unlock  */ 
                          RC(0,8) RC(0,7)  RC(0,6)        
               /* Slider switches on the bottom of the middle deck */
		/* Orientation (Front/Backwards)   Handiness L/R     */
                       RC(0,10)        	     RC(0,9)              
        >;
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios
            = <&pro_micro 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 1 */
            , <&pro_micro 8 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 2 */
            , <&pro_micro 7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 3 */
            , <&pro_micro 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 4 */
            , <&pro_micro 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 5 */
            , <&pro_micro 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 6 */

            , <&pro_micro 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)> /* Studio Unlock */
            , <&pro_micro 16 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)> /* BT Select */
            , <&pro_micro 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)> /* BT Reset  */
            , <&pro_micro 21 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)> /* Handness: Pressed - Right, Released - Left */
 	    , <&pro_micro 20 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)> /* Orientation: Pressed - Backwards, Released - fronts */

            , <&pro_micro 19 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 7 */
            , <&pro_micro 18 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>  /* Button 8 */
            ;
    };

};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
                <NRF_PSEL(SPIM_MOSI, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 17)>;
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 8)>,
                <NRF_PSEL(SPIM_MOSI, 0, 17)>,
                <NRF_PSEL(SPIM_MISO, 0, 17)>;
            low-power-enable;
        };
    };
};

#include <zephyr/dt-bindings/input/input-event-codes.h>

&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        cpi = <600>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;

        force-awake;
        /* keep the sensor awake while ZMK activity state is ACTIVE,
           fallback to normal downshift mode after ZMK goes into IDLE / SLEEP mode.
           thus, the sensor would be a `wakeup-source` */
    };
};
                              
/ {
  trackball_listener {
    compatible = "zmk,input-listener";
    device = <&trackball>;
    /* base processor chain on all layers */
    //input-processors = < &zip_xy_transform ( INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) >; // Inverts the pointer direction       

    /* Put scroll handlers first so it can do its operations, and then proceed to the next side/orientation-specific processors */
    /* Note that process-next command is not used - for each orientation-specific layer there is a separate handler.
       They are arranged so the highest (by number) layers are processed first, thus avoiding interception from the lowest ones' overrides. */

    /* layer-4 left hand front scroll override */
    left_front_scroller: left_front_scroller{
        layers           = <4>;
        input-processors = <
            &zip_xy_transform ( INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction       
            &zip_xy_scaler 1 15                              // Scales the scroll speed
            &zip_xy_to_scroll_mapper                         // Converts XY movement to scroll events
        >;
    };

    /* layer-5 right hand front scroll override */
    right_front_scroller: right_front_scroller{
        layers           = <5>;
        input-processors = <
            //&zip_xy_transform ( INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction
            &zip_xy_scaler 1 15                              // Scales the scroll speed
            &zip_xy_to_scroll_mapper                         // Converts XY movement to scroll events
        >;
    };

    /* layer-6 both hands back scroll override */
    back_scroller: back_scroller{
        layers           = <6>;
        input-processors = <
            &zip_xy_transform (INPUT_TRANSFORM_XY_SWAP |  INPUT_TRANSFORM_X_INVERT) // Inverts the pointer direction       
            &zip_xy_scaler 1 15                              // Scales the scroll speed
            &zip_xy_to_scroll_mapper                         // Converts XY movement to scroll events
        >;
    };

    /* layer-0 front Left Hand pointer */
    /* This default layer should not have any additional transformations. 
       All other layers will add to it, and then have all those extra steps removed
       when returned to the base layer.
    */

    /* layer-2 backwards Left Hand pointer */
    back_left_hand_pointer: back_left_hand_pointer{
        layers           = <2 3>;
        input-processors = <
            &zip_xy_transform (INPUT_TRANSFORM_X_INVERT |  INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction       
	   // The regular scrolling assumes the scroling wheel, which is not used here, so &zip_scroll_transform is not applicable and does not work.
	   // &zip_scroll_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction, from the default inversion..
        >;
//	process-next; // To process the scroller layer, if/when it is activated. Without this command the processing would stop here.
     };

    /* layer-1 Front Right Hand pointer */
    /* This layer's processor was intentionally moved to be after the left/right finger-controller layers, 
        so this is not get invoked when those layers are activated,
       to avoid double-rotations which occured when the handiness switch was set to Right before the orientation set to Landscape. */
//    front_right_hand_pointer: front_right_hand_pointer{
//        layers           = <1>;
//        input-processors = <
//            //&zip_xy_transform ( INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction
//	   // The regular scrolling assumes the scroling wheel, which is not used here, so &zip_scroll_transform is not applicable and does not work.
//	   // &zip_scroll_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT) // Inverts the pointer direction, from the default inversion..
//        >;
//	process-next; // To process the scroller layer, if/when it is activated. Without this command the processing would stop here.
//    };


  };
}; 
